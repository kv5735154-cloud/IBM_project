# -*- coding: utf-8 -*-
"""storage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11piyiRis4eQJEfRlAn45krguZBnsgH9z
"""

!pip install transformers torch gradio PyPDF2
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io
import json
import pandas as pd
from datetime import datetime, date
import uuid

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Global inventory storage
inventory_data = {}
sales_data = []
reorder_alerts = []

class InventoryManager:
    def __init__(self):
        self.inventory = {}
        self.sales_history = []
        self.suppliers = {}

    def add_item(self, item_id, item_name, category, price, cost, quantity,
                 supplier, reorder_point, expiry_date=None):
        """Add new item to inventory"""
        self.inventory[item_id] = {
            "item_name": item_name,
            "category": category,
            "price": float(price),
            "cost": float(cost),
            "quantity": int(quantity),
            "supplier": supplier,
            "reorder_point": int(reorder_point),
            "expiry_date": expiry_date,
            "last_updated": datetime.now().isoformat(),
            "total_sold": 0
        }
        return f"Item {item_name} added successfully with ID: {item_id}"

    def update_stock(self, item_id, quantity_change, transaction_type="adjustment"):
        """Update stock levels"""
        if item_id not in self.inventory:
            return "Item not found in inventory"

        old_quantity = self.inventory[item_id]["quantity"]
        new_quantity = old_quantity + int(quantity_change)

        if new_quantity < 0:
            return "Error: Stock cannot be negative"

        self.inventory[item_id]["quantity"] = new_quantity
        self.inventory[item_id]["last_updated"] = datetime.now().isoformat()

        # Record transaction
        self.sales_history.append({
            "item_id": item_id,
            "transaction_type": transaction_type,
            "quantity_change": quantity_change,
            "old_quantity": old_quantity,
            "new_quantity": new_quantity,
            "timestamp": datetime.now().isoformat()
        })

        return f"Stock updated: {self.inventory[item_id]['item_name']} - New quantity: {new_quantity}"

    def check_reorder_alerts(self):
        """Check which items need reordering"""
        alerts = []
        for item_id, item in self.inventory.items():
            if item["quantity"] <= item["reorder_point"]:
                alerts.append({
                    "item_id": item_id,
                    "item_name": item["item_name"],
                    "current_stock": item["quantity"],
                    "reorder_point": item["reorder_point"],
                    "supplier": item["supplier"]
                })
        return alerts

    def get_inventory_report(self):
        """Generate comprehensive inventory report"""
        if not self.inventory:
            return "No items in inventory"

        report = "=== INVENTORY REPORT ===\n\n"
        total_value = 0
        low_stock_items = 0

        for item_id, item in self.inventory.items():
            item_value = item["quantity"] * item["cost"]
            total_value += item_value

            if item["quantity"] <= item["reorder_point"]:
                low_stock_items += 1
                status = "⚠️ LOW STOCK"
            else:
                status = "✅ OK"

            report += f"ID: {item_id}\n"
            report += f"Name: {item['item_name']}\n"
            report += f"Category: {item['category']}\n"
            report += f"Quantity: {item['quantity']}\n"
            report += f"Price: ${item['price']:.2f}\n"
            report += f"Cost: ${item['cost']:.2f}\n"
            report += f"Value: ${item_value:.2f}\n"
            report += f"Status: {status}\n"
            report += f"Supplier: {item['supplier']}\n"
            report += "-" * 30 + "\n"

        report += f"\n=== SUMMARY ===\n"
        report += f"Total Items: {len(self.inventory)}\n"
        report += f"Total Inventory Value: ${total_value:.2f}\n"
        report += f"Low Stock Items: {low_stock_items}\n"

        return report

# Initialize inventory manager
inventory_manager = InventoryManager()

def generate_response(prompt, max_length=1024):
    """Generate AI response"""
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def analyze_inventory_requirements(pdf_file, prompt_text):
    """Analyze inventory management requirements"""
    if pdf_file is not None:
        try:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            content = ""
            for page in pdf_reader.pages:
                content += page.extract_text() + "\n"
        except Exception as e:
            content = f"Error reading PDF: {str(e)}"

        analysis_prompt = f"""Analyze the following inventory management document and provide:
        1. Key inventory requirements
        2. Product categories to track
        3. Recommended reorder points
        4. Supplier management needs
        5. Reporting requirements

        Document content:
        {content}"""
    else:
        analysis_prompt = f"""Analyze the following inventory management requirements and provide:
        1. Key inventory requirements
        2. Product categories to track
        3. Recommended reorder points
        4. Supplier management needs
        5. Reporting requirements

        Requirements:
        {prompt_text}"""

    return generate_response(analysis_prompt, max_length=1200)

def add_inventory_item(item_name, category, price, cost, quantity, supplier, reorder_point, expiry_date):
    """Add new item to inventory"""
    if not all([item_name, category, price, cost, quantity, supplier, reorder_point]):
        return "Error: All fields except expiry date are required"

    try:
        item_id = f"ITM_{len(inventory_manager.inventory) + 1:04d}"
        result = inventory_manager.add_item(
            item_id, item_name, category, price, cost,
            quantity, supplier, reorder_point, expiry_date
        )
        return result
    except Exception as e:
        return f"Error adding item: {str(e)}"

def update_inventory_stock(item_search, quantity_change, transaction_type):
    """Update stock levels"""
    if not item_search or not quantity_change:
        return "Error: Item ID/name and quantity change are required"

    # Find item by ID or name
    item_id = None
    for id, item in inventory_manager.inventory.items():
        if id.lower() == item_search.lower() or item["item_name"].lower() == item_search.lower():
            item_id = id
            break

    if not item_id:
        return f"Item '{item_search}' not found in inventory"

    try:
        result = inventory_manager.update_stock(item_id, int(quantity_change), transaction_type)
        return result
    except Exception as e:
        return f"Error updating stock: {str(e)}"

def generate_inventory_report():
    """Generate and return inventory report"""
    return inventory_manager.get_inventory_report()

def check_reorder_status():
    """Check reorder alerts"""
    alerts = inventory_manager.check_reorder_alerts()
    if not alerts:
        return "✅ All items are adequately stocked"

    report = "⚠️ REORDER ALERTS ⚠️\n\n"
    for alert in alerts:
        report += f"Item: {alert['item_name']} (ID: {alert['item_id']})\n"
        report += f"Current Stock: {alert['current_stock']}\n"
        report += f"Reorder Point: {alert['reorder_point']}\n"
        report += f"Supplier: {alert['supplier']}\n"
        report += "-" * 30 + "\n"

    return report

def search_inventory(search_term):
    """Search inventory by name or category"""
    if not search_term:
        return "Please enter a search term"

    results = []
    search_term = search_term.lower()

    for item_id, item in inventory_manager.inventory.items():
        if (search_term in item["item_name"].lower() or
            search_term in item["category"].lower() or
            search_term in item_id.lower()):
            results.append(f"ID: {item_id} | {item['item_name']} | Category: {item['category']} | Stock: {item['quantity']} | Price: ${item['price']:.2f}")

    if not results:
        return f"No items found matching '{search_term}'"

    return "\n".join(results)

def generate_inventory_insights():
    """Generate AI-powered inventory insights"""
    if not inventory_manager.inventory:
        return "No inventory data available for analysis"

    # Prepare inventory summary for AI analysis
    summary = f"Inventory Summary:\n"
    summary += f"Total items: {len(inventory_manager.inventory)}\n"

    categories = {}
    low_stock = 0
    total_value = 0

    for item in inventory_manager.inventory.values():
        if item["category"] not in categories:
            categories[item["category"]] = 0
        categories[item["category"]] += item["quantity"]

        if item["quantity"] <= item["reorder_point"]:
            low_stock += 1

        total_value += item["quantity"] * item["cost"]

    summary += f"Categories: {', '.join(categories.keys())}\n"
    summary += f"Low stock items: {low_stock}\n"
    summary += f"Total inventory value: ${total_value:.2f}\n"

    insights_prompt = f"""Based on the following inventory data, provide insights and recommendations for:
    1. Inventory optimization
    2. Stock level management
    3. Cost reduction opportunities
    4. Category performance
    5. Reorder strategy improvements

    {summary}"""

    return generate_response(insights_prompt, max_length=1000)

# Create Gradio interface
with gr.Blocks(title="Store Manager - Inventory Tracking System") as app:
    gr.Markdown("# 🏪 Store Manager - Inventory Tracking System")
    gr.Markdown("Comprehensive inventory management with AI-powered insights")

    with gr.Tabs():
        # Inventory Management Tab
        with gr.TabItem("📦 Inventory Management"):
            with gr.Row():
                with gr.Column():
                    gr.Markdown("### Add New Item")
                    item_name = gr.Textbox(label="Item Name", placeholder="e.g., Laptop, Coffee Beans")
                    category = gr.Dropdown(
                        choices=["Electronics", "Food & Beverages", "Clothing", "Books", "Home & Garden", "Sports", "Other"],
                        label="Category",
                        value="Other"
                    )
                    with gr.Row():
                        price = gr.Number(label="Selling Price ($)", value=0.00)
                        cost = gr.Number(label="Cost Price ($)", value=0.00)
                    with gr.Row():
                        quantity = gr.Number(label="Initial Quantity", value=0)
                        reorder_point = gr.Number(label="Reorder Point", value=10)
                    supplier = gr.Textbox(label="Supplier", placeholder="Supplier name")
                    expiry_date = gr.Textbox(label="Expiry Date (Optional)", placeholder="YYYY-MM-DD")
                    add_btn = gr.Button("Add Item", variant="primary")

                with gr.Column():
                    add_result = gr.Textbox(label="Result", lines=3)

            add_btn.click(
                add_inventory_item,
                inputs=[item_name, category, price, cost, quantity, supplier, reorder_point, expiry_date],
                outputs=add_result
            )

        # Stock Management Tab
        with gr.TabItem("📊 Stock Management"):
            with gr.Row():
                with gr.Column():
                    gr.Markdown("### Update Stock Levels")
                    item_search = gr.Textbox(label="Item ID or Name", placeholder="Search by ID or name")
                    quantity_change = gr.Number(label="Quantity Change", placeholder="Use negative for reduction")
                    transaction_type = gr.Dropdown(
                        choices=["sale", "purchase", "adjustment", "return", "damage"],
                        label="Transaction Type",
                        value="adjustment"
                    )
                    update_btn = gr.Button("Update Stock", variant="primary")

                    gr.Markdown("### Search Inventory")
                    search_term = gr.Textbox(label="Search Term", placeholder="Search by name, category, or ID")
                    search_btn = gr.Button("Search")

                with gr.Column():
                    update_result = gr.Textbox(label="Update Result", lines=3)
                    search_result = gr.Textbox(label="Search Results", lines=10)

            update_btn.click(
                update_inventory_stock,
                inputs=[item_search, quantity_change, transaction_type],
                outputs=update_result
            )

            search_btn.click(
                search_inventory,
                inputs=[search_term],
                outputs=search_result
            )

        # Reports Tab
        with gr.TabItem("📈 Reports & Analytics"):
            with gr.Row():
                with gr.Column():
                    gr.Markdown("### Generate Reports")
                    inventory_report_btn = gr.Button("📋 Full Inventory Report", variant="primary")
                    reorder_btn = gr.Button("⚠️ Reorder Alerts", variant="secondary")
                    insights_btn = gr.Button("🧠 AI Insights", variant="secondary")

                with gr.Column():
                    report_output = gr.Textbox(label="Report Output", lines=25)

            inventory_report_btn.click(generate_inventory_report, outputs=report_output)
            reorder_btn.click(check_reorder_status, outputs=report_output)
            insights_btn.click(generate_inventory_insights, outputs=report_output)

        # Requirements Analysis Tab
        with gr.TabItem("📋 Requirements Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF Document", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or describe inventory requirements",
                        placeholder="Describe your store's inventory management needs...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze Requirements", variant="primary")

                with gr.Column():
                    analysis_output = gr.Textbox(label="Analysis Results", lines=20)

            analyze_btn.click(
                analyze_inventory_requirements,
                inputs=[pdf_upload, prompt_input],
                outputs=analysis_output
            )

# Launch the application
if __name__ == "__main__":
    app.launch(share=True, server_name="0.0.0.0", server_port=7860)